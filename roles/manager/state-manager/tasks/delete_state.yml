---

- block:
    - name: "delete_state | check package state file"
      stat:
        path: "{{ packages_state_file }}"
      register: packages_state_file_obj

    - name: "delete_state | load package state file"
      include_vars:
        file: "{{ packages_state_file }}"
        name: package_state
      when: packages_state_file_obj.stat.exists

    - name: "delete_state | set empty package_state object"
      set_fact:
        package_state: []
      when: not packages_state_file_obj.stat.exists|bool
  when: package_state is not defined

- name: "delete_state | fail when package is not installed"
  fail:
    msg: "package {{ state_package_name }}-{{ state_package_version }} is not installed"
  when: (package_state[state_package_name + '-' + state_package_version] is not defined) and (state_mode == "strict")

- debug:
    msg: "{{state_package_name}} {{state_package_version}}"


- debug:
    msg: "{{ package_state }}"

- block:
    - set_fact:
        new_package_state: []
    - set_fact:
        new_package_state: "{{ new_package_state | combine ( {rebuild_package_state_item.key: rebuild_package_state_item.value} ) }}"
      when: "{{rebuild_package_state_item.key not in [state_package_name + '-' + state_package_version]}}"
      with_dict: "{{ package_state }}"
      loop_control:
        loop_var: rebuild_package_state_item

    - name: "delete_state | transform package_state into nice yaml output"
      set_fact:
        package_state_yml: "{{ new_package_state | to_nice_yaml( width=50, explicit_start=True, explicit_end=True) }}"

    - name: "delete_state | write package_state file"
      copy:
        content: "{{ package_state_yml }}"
        dest: "{{ packages_state_file }}"
      become: true

    - name: "delete_state | reset package_stage object"
      set_fact:
        package_state: "{{ new_package_state }}"
  when: package_state[state_package_name + '-' + state_package_version] is defined

