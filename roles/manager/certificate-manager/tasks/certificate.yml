---

- name: "certificate | fail when 'certificate_client_domain' is not defined"
  fail:
    msg: "var 'certificate_client_domain' is not defined"
  when: certificate_client_domain is not defined

- name: "certificate | ensure the base directory exists"
  file:
    path: "{{ certificate_cert_base_path }}"
    state: directory
    owner: "{{ current_user }}"
    group: "{{ current_group }}"
    mode: '0755'
  become: true

- name: "certificate | set domain base path var"
  set_fact:
    certificate_domain_base_path: "{{ certificate_cert_base_path }}/{{ certificate_client_domain }}"

- name: "certificate | set domain specific vars"
  set_fact:
    certificate_domain_key_file: "{{ certificate_domain_base_path }}/{{ certificate_client_key_filename }}"
    certificate_domain_csr_file: "{{ certificate_domain_base_path }}/{{ certificate_client_csr_filename }}"
    certificate_domain_cert_file: "{{ certificate_domain_base_path }}/{{ certificate_client_cert_filename }}"
    certificate_domain_fullchain_file: "{{ certificate_domain_base_path }}/{{ certificate_client_fullchain_filename }}"

- name: "certificate | ensure the domain base directory exists"
  file:
    path: "{{ certificate_domain_base_path }}"
    state: directory
    owner: "{{ current_user }}"
    group: "{{ current_group }}"
    mode: '0755'
  become: true

- name: "certificate | generate client key file for requested domain"
  shell: "openssl genrsa -out {{ certificate_domain_key_file }} {{ certificate_client_key_size }}"
  args:
    creates: "{{ certificate_domain_key_file }}"
  become: true

- name: "certificate | ensure the private key is only readable by root"
  file:
    path: "{{ certificate_domain_key_file }}"
    owner: "{{ current_user }}"
    group: "{{ current_group }}"
    mode: 0600
  become: true

- name: "certificate | create temporary file"
  tempfile:
    state: file
    suffix: temp
  register: certificate_csr_conf_file_obj

- name: "certificate | create temporary ssl configuration file for csr"
  template:
    src: config.cnf.j2
    dest: "{{ certificate_csr_conf_file_obj.path }}"
    owner: "{{ current_user }}"
    group: "{{ current_group }}"
    mode: '0644'

- name: "certificate | generate src for {{ certificate_client_domain }}"
  shell: "openssl req -new -key {{ certificate_domain_key_file }} -out {{certificate_domain_csr_file }} -config {{ certificate_csr_conf_file_obj.path }}"
  args:
    creates: "{{ certificate_domain_csr_file }}"
  become: true

- name: "certificate | sign csr with ca"
  shell: "openssl x509 -req -in {{ certificate_domain_csr_file }} -CA {{ certificate_ca_cert_file }} -CAkey {{ certificate_ca_key_file }} -CAcreateserial -out {{ certificate_domain_cert_file }} -days {{ certificate_client_cert_lifetime }} -sha256"
  args:
    creates: "{{ certificate_domain_cert_file }}"
  become: true

- name: "certificate | delete temporary configuration file"
  file:
    path: "{{ certificate_csr_conf_file_obj.path }}"
    state: absent
  become: true

- name: "certificate | get fs information for certificate full chain file"
  stat:
    path: "{{ certificate_domain_fullchain_file }}"
  register: certificate_domain_fullchain_file_obj

- name: "certificate | merge certificate and ca file into fullchain file"
  shell: "{{ item }}"
  with_items:
    - "cat {{ certificate_domain_cert_file }} > {{ certificate_domain_fullchain_file }}"
    - "cat {{ certificate_ca_cert_file }} >> {{ certificate_domain_fullchain_file }}"
  when: certificate_domain_fullchain_file_obj.stat.exists == false
  become: true