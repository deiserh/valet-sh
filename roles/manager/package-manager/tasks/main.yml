---

- name: "@vsh check for essential packages"
  include_tasks: essentials/main.yml


- name: load state-manager
  include_role:
    name: state-manager
  vars:
    state_action: get_state
    state_package_name: "{{ package_name }}"
    state_package_version: "{{ package_version }}"
  # output: package_condition

- name: call install tasks when package_action equals to "install"
  include_tasks: install/main.yml
  vars:
    current_package_name: "{{ package_name }}"
    current_package_version: "{{ package_version }}"
  when: (package_action is defined) and (package_action == "install")

- name: call upgrade tasks when package_action equals to "upgrade"
  include_tasks: upgrade/main.yml
  vars:
    current_package_name: "{{ package_name }}"
    current_package_version: "{{ package_version }}"
  when: (package_action is defined) and (package_action == "upgrade")

- name: call upgrade tasks when package_action equals to "reconfigure"
  include_tasks: reconfigure/main.yml
  vars:
    current_package_name: "{{ package_name }}"
    current_package_version: "{{ package_version }}"
  when: (package_action is defined) and (package_action == "reconfigure")

- name: call remove tasks when package_action equals to "remove"
  include_tasks: remove/main.yml
  vars:
    current_package_name: "{{ package_name }}"
    current_package_version: "{{ package_version }}"
  when: (package_action is defined) and (package_action == "remove")

- name: call purge tasks when package_action equals to "purge"
  include_tasks: purge/main.yml
  vars:
    current_package_name: "{{ package_name }}"
    current_package_version: "{{ package_version }}"
  when: (package_action is defined) and (package_action == "purge")


- name: call custom tasks when package_action equals to "custom"
  include_tasks: custom/main.yml
  vars:
    current_package_name: "{{ package_name }}"
    current_package_version: "{{ package_version }}"
  when: (package_action is defined) and (package_action == "custom")